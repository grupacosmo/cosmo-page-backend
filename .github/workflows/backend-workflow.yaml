name: Test and Deploy

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          # Install any dependencies required for running your tests
          # Modify this step to match your project's setup
        # Example: npm install

      - name: Run tests
        run: |
          # Run your test suite
          # Modify this step to match your project's setup
        # Example: npm test

  deploy:
    name: Deploy with Docker
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/master'

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          # Build your Docker image and push it to a Docker registry
          docker build -t your-image-name .
          docker push your-image-name
        env:
          DOCKER_BUILDKIT: 1

      - name: SSH into your server
        uses: appleboy/ssh-action@v0.4.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}

      - name: Pull the latest Docker image
        run: |
          ssh ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_HOST }} 'docker pull your-image-name'
          ssh ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_HOST }} 'docker stop your-container-name || true'
          ssh ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_HOST }} 'docker rm your-container-name || true'
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SERVER_SSH_PRIVATE_KEY }}

      - name: Start the Docker container
        run: |
          ssh ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_HOST }} 'docker run -d --name your-container-name -p 80:80 your-image-name'
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SERVER_SSH_PRIVATE_KEY }}
